{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nghuytan\\\\KLTN\\\\dApp\\\\land-registry\\\\client\\\\src\\\\components\\\\admin.js\";\n// Can assign land and view all properties he approved previously\nimport React from 'react';\nimport axios from 'axios';\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.registerLand = async () => {\n      await this.props.createProp(this.state.surveynumber, this.state.address.toLowerCase(), this.state.marketvalue, this.state.type, this.props.userinfo.citytown, this.props.userinfo.district, this.props.userinfo.state);\n      axios.get('http://localhost:5000/api/properties/' + this.state.surveynumber).then(res => {\n        //Check if the property is already registered\n        if (res.data === null) {\n          //Check if a user exists with the given address\n          axios.get('http://localhost:5000/api/user/' + this.state.address.toLowerCase()).then(res => {\n            if (res.data) {\n              //This code is repetitive; Can be optimized (1)\n              axios.post('http://localhost:5000/api/properties/register', {\n                address: this.state.address.toLowerCase(),\n                surveynumber: this.state.surveynumber,\n                type: this.state.type,\n                marketvalue: this.state.marketvalue,\n                citytown: this.props.userinfo.citytown,\n                district: this.props.userinfo.district,\n                state: this.props.userinfo.state,\n                registeredby: this.props.address\n              }).then(res => {\n                let list = this.state.registeredList;\n                list.push(res.data);\n                this.setState({\n                  registeredList: list,\n                  address: \"\",\n                  surveynumber: \"\",\n                  type: \"\",\n                  marketvalue: \"\"\n                });\n                this.props.codeChanger(8);\n              }).catch(error => {\n                console.log(error, \"Try again!\");\n              });\n            } else {\n              //Create a user with the given address\n              axios.post('http://localhost:5000/api/user/add', {\n                address: this.state.address.toLowerCase()\n              }).then(res => {\n                //This code is repetitive; Can be optimized (2)\n                axios.post('http://localhost:5000/api/properties/register', {\n                  address: this.state.address.toLowerCase(),\n                  surveynumber: this.state.surveynumber,\n                  type: this.state.type,\n                  marketvalue: this.state.marketvalue,\n                  citytown: this.props.userinfo.citytown,\n                  district: this.props.userinfo.district,\n                  state: this.props.userinfo.state,\n                  registeredby: this.props.address\n                }).then(res => {\n                  let list = this.state.registeredList;\n                  list.push(res.data);\n                  this.setState({\n                    registeredList: list,\n                    address: \"\",\n                    surveynumber: \"\",\n                    type: \"\",\n                    marketvalue: \"\"\n                  });\n                  this.props.codeChanger(8);\n                }).catch(error => {\n                  console.log(error, \"Try again!\");\n                });\n              }).catch(error => {\n                console.log(error, \"Try again!\");\n              });\n            }\n          }).catch(error => {\n            console.log(error, \"Try again!\");\n          });\n        } else {\n          this.props.codeChanger(7);\n        }\n      });\n    };\n\n    this.state = {\n      registeredList: [],\n      address: \"\",\n      surveynumber: \"\",\n      type: \"\",\n      marketvalue: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/api/properties/admin/' + this.props.address).then(res => {\n      this.setState({\n        registeredList: res.data\n      });\n    }).catch(error => {\n      console.log(error, \"Try again!\");\n    });\n  }\n\n  changeDetect() {\n    let _this$props$userinfo = this.props.userinfo,\n        phone = _this$props$userinfo.phone,\n        name = _this$props$userinfo.name,\n        cccd = _this$props$userinfo.cccd,\n        email = _this$props$userinfo.email;\n    let _this$state = this.state,\n        updatedPhone = _this$state.phone,\n        updatedName = _this$state.name,\n        updatedcccd = _this$state.cccd,\n        updatedEmail = _this$state.email;\n\n    if (phone === updatedPhone && name === updatedName && cccd === updatedcccd && email === updatedEmail) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"superadmin admin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Register Property\"), React.createElement(\"input\", {\n      className: \"app-input\",\n      type: \"text\",\n      name: \"address\",\n      placeholder: \"Owner's Address\",\n      autoComplete: \"new-password\",\n      value: this.state.address,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"app-input\",\n      type: \"text\",\n      name: \"surveynumber\",\n      placeholder: \"Survey Number\",\n      value: this.state.surveynumber,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"app-input\",\n      type: \"text\",\n      name: \"type\",\n      placeholder: \"Type\",\n      value: this.state.type,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"app-input\",\n      type: \"number\",\n      name: \"marketvalue\",\n      placeholder: \"Market Value\",\n      value: this.state.marketvalue,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"app-button-1\",\n      onClick: () => this.registerLand(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Register\")), React.createElement(\"div\", {\n      className: \"adminpanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"superadmintitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Admin Portal\"), React.createElement(\"div\", {\n      className: \"adminslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"superadmintitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Recently Registered Properties\"), this.state.registeredList.map((info, index) => React.createElement(\"div\", {\n      className: \"adminel\",\n      key: \"adminele-\" + index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"adaddress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Address:\"), \" \", info.address), React.createElement(\"div\", {\n      className: \"adTown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Survey Number:\"), \" \", info.surveynumber))))));\n  }\n\n}\n\nexport default Admin;","map":{"version":3,"sources":["C:/Nghuytan/KLTN/dApp/land-registry/client/src/components/admin.js"],"names":["React","axios","Admin","Component","constructor","props","handleInput","e","setState","target","name","value","registerLand","createProp","state","surveynumber","address","toLowerCase","marketvalue","type","userinfo","citytown","district","get","then","res","data","post","registeredby","list","registeredList","push","codeChanger","catch","error","console","log","componentDidMount","changeDetect","phone","cccd","email","updatedPhone","updatedName","updatedcccd","updatedEmail","render","map","info","index"],"mappings":"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","sourcesContent":["// Can assign land and view all properties he approved previously\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Admin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { registeredList: [], address: \"\", surveynumber: \"\", type: \"\", marketvalue: \"\" }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/api/properties/admin/' + this.props.address)\r\n            .then(res => {\r\n                this.setState({ registeredList: res.data })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error, \"Try again!\")\r\n            })\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    changeDetect() {\r\n        let { phone, name, cccd, email } = this.props.userinfo\r\n        let { phone: updatedPhone, name: updatedName, cccd: updatedcccd, email: updatedEmail } = this.state\r\n        if (phone === updatedPhone && name === updatedName && cccd === updatedcccd && email === updatedEmail) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n\r\n    registerLand = async () => {\r\n        await this.props.createProp(this.state.surveynumber, this.state.address.toLowerCase(), this.state.marketvalue, this.state.type, this.props.userinfo.citytown, this.props.userinfo.district, this.props.userinfo.state)\r\n        axios.get('http://localhost:5000/api/properties/' + this.state.surveynumber)\r\n            .then(res => {//Check if the property is already registered\r\n                if (res.data === null) {//Check if a user exists with the given address\r\n                    axios.get('http://localhost:5000/api/user/' + this.state.address.toLowerCase())\r\n                        .then(res => {\r\n                            if (res.data) {\r\n                                //This code is repetitive; Can be optimized (1)\r\n                                axios.post('http://localhost:5000/api/properties/register', { address: this.state.address.toLowerCase(), surveynumber: this.state.surveynumber, type: this.state.type, marketvalue: this.state.marketvalue, citytown: this.props.userinfo.citytown, district: this.props.userinfo.district, state: this.props.userinfo.state, registeredby: this.props.address })\r\n                                    .then(res => {\r\n                                        let list = this.state.registeredList;\r\n                                        list.push(res.data);\r\n                                        this.setState({ registeredList: list, address: \"\", surveynumber: \"\", type: \"\", marketvalue: \"\" });\r\n                                        this.props.codeChanger(8)\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log(error, \"Try again!\")\r\n                                    })\r\n                            } else {//Create a user with the given address\r\n                                axios.post('http://localhost:5000/api/user/add', { address: this.state.address.toLowerCase() })\r\n                                    .then(res => {\r\n                                        //This code is repetitive; Can be optimized (2)\r\n                                        axios.post('http://localhost:5000/api/properties/register', { address: this.state.address.toLowerCase(), surveynumber: this.state.surveynumber, type: this.state.type, marketvalue: this.state.marketvalue, citytown: this.props.userinfo.citytown, district: this.props.userinfo.district, state: this.props.userinfo.state, registeredby: this.props.address })\r\n                                            .then(res => {\r\n                                                let list = this.state.registeredList;\r\n                                                list.push(res.data);\r\n                                                this.setState({ registeredList: list, address: \"\", surveynumber: \"\", type: \"\", marketvalue: \"\" });\r\n                                                this.props.codeChanger(8)\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                console.log(error, \"Try again!\")\r\n                                            })\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log(error, \"Try again!\")\r\n                                    });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error, \"Try again!\")\r\n                        });\r\n                } else {\r\n                    this.props.codeChanger(7)\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"superadmin admin\">\r\n                <div className=\"wrapper\">\r\n                    <h2>Register Property</h2>\r\n                    <input className=\"app-input\" type=\"text\" name=\"address\" placeholder=\"Owner's Address\" autoComplete=\"new-password\" value={this.state.address} onChange={this.handleInput} />\r\n                    <input className=\"app-input\" type=\"text\" name=\"surveynumber\" placeholder=\"Survey Number\" value={this.state.surveynumber} onChange={this.handleInput} />\r\n                    <input className=\"app-input\" type=\"text\" name=\"type\" placeholder=\"Type\" value={this.state.type} onChange={this.handleInput} />\r\n                    <input className=\"app-input\" type=\"number\" name=\"marketvalue\" placeholder=\"Market Value\" value={this.state.marketvalue} onChange={this.handleInput} />\r\n                    <button className=\"app-button-1\" onClick={() => this.registerLand()}>Register</button>\r\n                </div>\r\n                <div className=\"adminpanel\">\r\n                    <h3 className=\"superadmintitle\">Admin Portal</h3>\r\n                    <div className=\"adminslist\">\r\n                        <p className=\"superadmintitle\">Recently Registered Properties</p>\r\n                        {this.state.registeredList.map((info, index) => (\r\n                            <div className=\"adminel\" key={\"adminele-\" + index}>\r\n                                <div className=\"adaddress\"><strong>Address:</strong> {info.address}</div>\r\n                                <div className=\"adTown\"><strong>Survey Number:</strong> {info.surveynumber}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin"]},"metadata":{},"sourceType":"module"}